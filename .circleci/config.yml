version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  # aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID:0:7}
# Define the jobs we want to run for this project
jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1
      - destroy_environment
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="nd9991-c3-ex28-ps-${CIRCLE_WORKFLOW_ID:0:7}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack.
          # Use $OldBucketID environment variable or nd9991-c3-ex28-1686127920 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            export OldBucketID=nd9991-c3-ex28-1686127920
            aws s3 rm "s3://${OldBucketID}" --recursive

  # Exercise: Config and Deployment
  configure_infrastructure:
    docker:
      - image: python:3.11-alpine
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["f9:56:6d:26:e1:e4:f5:41:c2:17:37:30:d0:1b:a9:d0"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main.yml
      - destroy_environment
  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com5/"
            # Test if website exists
            if curl -s --head ${URL}
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
  # Exercise: Promote to Production
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="nd9991-c3-ex28-ps-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync index.html s3://nd9991-c3-ex28-ps-${CIRCLE_WORKFLOW_ID:0:7} --delete

# Sequential workflow
workflows:
    # Name the workflow
    myWorkflow:
      jobs:
#        - create_infrastructure
# This needs to know the IP address of the instance generated in the previous step
#        - configure_infrastructure:
#            requires:
#              - create_infrastructure
#        - smoke_test:
#            requires:
#              - configure_infrastructure
        - create_and_deploy_front_end
        - promote_to_production:
            requires:
              - create_and_deploy_front_end
        - get_last_deployment_id
        - clean_up_old_front_end:
            requires:
              - get_last_deployment_id
              - promote_to_production
